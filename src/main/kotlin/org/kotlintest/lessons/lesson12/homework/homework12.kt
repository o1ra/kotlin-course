package org.example.org.kotlintest.lessons.lesson12.homework

fun main() {

    val collection: List<Int> = listOf<Int>(1, 2, 3, 4, 5, 6, 7, 8, 9, 0)

//Задачи на приведение коллекции к значению
//1. Проверить, что размер коллекции больше 5 элементов.
    val size = collection.size > 5
//2. Проверить, что коллекция пустая
    val empty = collection.isEmpty()
//3. Проверить, что коллекция не пустая
    val notEmpty = collection.isNotEmpty()
//4. Взять элемент по индексу или создать значение если индекса не существует
    val element = collection.getOrElse(5) { null }
//5. Собрать коллекцию в строку
    val intToString = collection.joinToString()
    println(intToString)

//6. Посчитать сумму всех значений
    val sum = collection.sum()

//7. Посчитать среднее
    val average = collection.average()

//8. Взять максимальное число
    val max = collection.maxOrNull()

//9. Взять минимальное число
    val min = collection.minOrNull()
//10. Взять первое число или null
    val firstEl = collection.firstOrNull()

//11. Проверить что коллекция содержит элемент
    val containsEl = collection.contains(6)


//Реши задачи подходящим методом для работы с коллекцией.
// Для каждой задачи есть свой метод, не повторяйся. Список методов в рекомендациях под заданиями.
// Задачи на обработку коллекций

//12. Отфильтровать коллекцию по диапазону 18-30
    val filterCol = collection.filter { it in 18..30 }
//13. Выбрать числа, которые не делятся на 2 и 3 одновременно
    val del = collection.filterNot { it % 2 == 0 && it % 3 == 0 }
//14. Очистить текстовую коллекцию от null элементов
    val delNull = collection.filterNotNull()

//15. Преобразовать текстовую коллекцию в коллекцию длин слов
    val list2: List<String> = listOf(
        "Стол",
        "табурет",
        "ваза",
        "Кружка",
        "Зеркало",
        "ковер",
        "Шкаф",
        "часы",
        "Люстра",
        "подушка",
        "Картина",
        "столик",
        "Вазон",
        "шторы",
        "Пуф",
        "книга",
        "Фоторамка",
        "светильник",
        "Коврик",
        "вешалка",
        "Подставка",
        "телевизор",
        "Комод",
        "полка",
        "Абажур",
        "диван",
        "Кресло",
        "занавеска",
        "Бра",
        "пепельница",
        "Глобус",
        "статуэтка",
        "Поднос",
        "фигурка",
        "Ключница",
        "плед",
        "Тумба",
        "игрушка",
        "Настенные часы",
        "подсвечник",
        "Журнальный столик",
        "сувенир",
        "Корзина для белья",
        "посуда",
        "Настольная лампа",
        "торшер",
        "Этажерка"
    )
    val listLength = list2.map { it -> it.length }
//16. Преобразовать текстовую коллекцию в мапу, где ключи - перевёрнутые слова, а значения - длина слов
    val map = list2.map { it.reversed() to it.length }
//17. Отсортировать список в алфавитном порядке
    val sorted = list2.sorted()
//18. Взять первые 3 элемента списка
    val take = list2.take(3)
//19. Распечатать квадраты элементов списка
    val printIt = collection.forEach {
        println(it * it)
    }

//20. Группировать список по первой букве слов
    val groupList = list2.groupingBy { it.first() }

//21. Очистить список от дублей
    val notDouble = list2.distinct()

//22. Отсортировать список по убыванию
    val sort2 = collection.sortedDescending()

//23. зять последние 3 элемента списка
    val last3 = collection.takeLast(3)

    //Реши задачи ниже в отдельных функциях.
//Задача 24. Характеристика числовой коллекции.
//Напиши функцию, которая принимает коллекцию чисел и возвращает строку с характеристикой коллекции используя конструкцию when
    fun collection2(numbers: List<Int>): String {
        return when {
            numbers.isEmpty() -> "Пусто"
            numbers.size < 5 -> "Короткая"
            numbers.firstOrNull() == 0 -> "Стартовая"
            numbers.sum() > 10000 -> "Массивная"
            numbers.average() == 10.0 -> "Сбалансированная"
            numbers.joinToString("").length == 20 -> "Клейкая"
            (numbers.maxOrNull() ?: Int.MIN_VALUE) < -10 -> "Отрицательная"
            (numbers.minOrNull() ?: Int.MAX_VALUE) > 1000 -> "Положительная"
            numbers.contains(3) && numbers.contains(14) -> "Пи***тая"
            else -> "Уникальная"
        }
    }

    println(collection2(listOf())) // Пусто
    println(collection2(listOf(1, 2, 3))) // Короткая
    println(collection2(listOf(0, 5, 6))) // Стартовая
    println(collection2(listOf(5000, 4000, 2001))) // Массивная (сумма > 10000)
    println(collection2(List(10) { 10 })) // Сбалансированная (среднее = 10)
    println(collection2(listOf(11111, 11111, 11111, 11111))) // Клейкая (склейка в строку длиной 20)
    println(collection2(listOf(-20, -15, -30))) // Отрицательная (максимум < -10)
    println(collection2(listOf(1500, 2000, 3000))) // Положительная (минимум > 1000)
    println(collection2(listOf(3, 14, 100))) // Пи***тая (содержит 3 и 14)
    println(collection2(listOf(7, 8, 9, 100))) // Уникальная (никакие условия не выполнены)


//Задача 25. Анализ учебных оценок.
//Напиши функцию, которая принимает список чисел и возвращает список чисел.
    val grades = listOf(85, 58, 90, 74, 88, 67, 95, 92, 50, 42, 12)

    //Цель: Отфильтровать удовлетворительные оценки (>=60), отсортировать оставшиеся по возрастанию и взять первые 3.
// Вызывай методы обработки и фильтрации последовательно один из другого, чтобы результат
// предыдущего метода являлся основой для следующего.
    fun analyzeGrades(grades: List<Int>): List<Int> {
        return grades
            .filter { it >= 60 }
            .sorted()
            .take(3)
    }

//Задача 26. Создание каталога по первой букве.
//Напиши функцию, которая принимает список строк и возвращает словарь с ключом - буквой и значением - списком строк.
    val list = listOf(
        "Стол",
        "табурет",
        "ваза",
        "Кружка",
        "Зеркало",
        "ковер",
        "Шкаф",
        "часы",
        "Люстра",
        "подушка",
        "Картина",
        "столик",
        "Вазон",
        "шторы",
        "Пуф",
        "книга",
        "Фоторамка",
        "светильник",
        "Коврик",
        "вешалка",
        "Подставка",
        "телевизор",
        "Комод",
        "полка",
        "Абажур",
        "диван",
        "Кресло",
        "занавеска",
        "Бра",
        "пепельница",
        "Глобус",
        "статуэтка",
        "Поднос",
        "фигурка",
        "Ключница",
        "плед",
        "Тумба",
        "игрушка",
        "Настенные часы",
        "подсвечник",
        "Журнальный столик",
        "сувенир",
        "Корзина для белья",
        "посуда",
        "Настольная лампа",
        "торшер",
        "Этажерка"
    )

//Цель: Привести все слова в списке к нижнему регистру, сгруппировать в каталог по первой букве используя метод groupBy

    fun createCatalog(items: List<String>): Map<Char, List<String>> {
        return items
            .map { it.lowercase() }
            .groupBy { it.first() }
    }

    println(createCatalog(list))
    //Задание 27. Подсчёт средней длины слов в списке.
//Напиши функцию, которая принимает список строк и возвращает строку.
//Начальные значения взять из предыдущей задачи.
//Цель: Перевести все слова в количество букв, подсчитать среднее значение. Вернуть форматированный
// текст с двумя знаками после запятой, используя функцию format и подходящий шаблон.
    fun avgWordLength(words: List<String>): String {
        val avg = if (words.isEmpty()) 0.0 else words.map { it.length }.average()
        return "Средняя длина слова: %.2f".format(avg)
    }

    val words = listOf("automation", "test", "run")
    println(avgWordLength(words))

//Задание 28: Категоризация чисел.
//Напиши функцию, которая принимает список чисел и возвращает словарь с ключами - строками и значениями - список чисел.
//Цель: Отобрать уникальные числа, отсортировать по убыванию и сгруппировать по четности (“четные” и “нечетные”).
    val numbers = listOf(1, 3, 5, 7, 3, 1, 8, 9, 9, 7)

    fun categorizeNumbers(numbers: List<Int>): Map<String, List<Int>> {
        return numbers
            .distinct()
            .sortedDescending()
            .groupBy {
                if (it % 2 == 0) "четные" else "нечетные"
            }
    }

    val result = categorizeNumbers(numbers)
    println(result)


//Задание 29: Поиск первого подходящего элемента.
//Напиши функцию, которая принимает список чисел и число и возвращает nullable число.
//Цель: Найти первый возраст в списке, который соответствует условию
// (больше второго аргумента) и вернуть его, либо null если значения не нашлось.
    val ages = listOf(22, 18, 30, 45, 17, null, 60)
    val num: Int = 18

    fun findFirstGreater(ages: List<Int?>, num: Int): Int? {
        return ages.filterNotNull().firstOrNull { it > num }
    }

    println(findFirstGreater(ages, num))


}